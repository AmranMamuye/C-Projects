#include "mbed.h"
#include "uLCD_4DGL.h"
#define ALIEN_HEIGHT 8
#define ALIEN_WIDTH 11
#define _ 0x000000 //BLACK
#define X 0xFFFFFF //WHITE
#define B 0x0000FF //BLUE
#define R 0xFF0000 //RED
#include <stdio.h>
#include <cstdlib>
#include <iostream>
#include <ctime>
#include <time.h>
#include "PinDetect.h"
#include "MMA8452.h"
#include "Speaker.h"

using namespace std;
Timer t;

PinDetect pb1(p23);
PinDetect pb2(p22);
PinDetect Shoot(p21);
DigitalOut myLed1(LED1);
DigitalOut myLed2(LED2);
DigitalOut myLed3(LED3);
Serial pc(USBTX,USBRX);
uLCD_4DGL uLCD(p9, p10, p11); // create a global lcd object
MMA8452 acc(p28, p27, 40000);
Speaker mySpeaker(p24);

using namespace std;
int alienBobDown_sprite[ALIEN_HEIGHT * ALIEN_WIDTH] =
{ _,_,X,_,_,_,_,_,X,_,_,
    _,_,_,X,_,_,_,X,_,_,_,
    _,_,X,X,X,X,X,X,X,_,_,
    _,X,X,_,X,X,X,_,X,X,_,
    X,X,X,X,X,X,X,X,X,X,X,
    X,_,X,X,X,X,X,X,X,_,X,
    X,_,X,_,_,_,_,_,X,_,X,
    _,_,_,X,X,_,X,X,_,_,_,
};

int alienBobUp_sprite[ALIEN_HEIGHT * ALIEN_WIDTH] =
{
    _,_,X,_,_,_,_,_,X,_,_,
    X,_,_,X,_,_,_,X,_,_,X,
    X,_,X,X,X,X,X,X,X,_,X,
    X,X,X,_,X,X,X,_,X,X,X,
    X,X,X,X,X,X,X,X,X,X,X,
    _,_,X,X,X,X,X,X,X,_,_,
    _,_,X,_,_,_,_,_,X,_,_,
    _,X,_,_,_,_,_,_,_,X,_,
};
int alienAlice_sprite[ALIEN_HEIGHT * ALIEN_WIDTH] =
{
    _,_,_,_,X,X,X,_,_,_,_,
    _,X,X,X,X,X,X,X,X,X,_,
    X,X,X,X,X,X,X,X,X,X,X,
    X,X,X,_,_,X,_,_,X,X,X,
    X,X,X,X,X,X,X,X,X,X,X,
    _,_,_,X,X,_,X,X,_,_,_,
    _,_,X,X,_,_,_,X,X,_,_,
    X,X,_,_,_,X,_,_,_,X,X,
};

int alienAlex_sprite[ALIEN_HEIGHT * ALIEN_WIDTH] = {
    _,_,B,_,_,_,_,_,B,_,_,
    _,_,_,B,_,_,_,B,_,_,_,
    _,_,B,B,B,B,B,B,B,_,_,
    B,B,B,_,B,B,B,_,B,B,B,
    B,B,B,B,_,B,_,B,B,B,B,
    _,_,B,B,B,B,B,B,B,_,_,
    B,_,B,_,_,B,_,_,B,_,B,
    _,_,_,B,B,_,B,B,_,_,_,
};

int alienDom_sprite[ALIEN_HEIGHT * ALIEN_WIDTH] = {
    _,_,R,_,_,_,_,_,R,_,_,
    R,_,_,R,_,_,_,R,_,_,R,
    R,_,R,R,R,R,R,R,R,_,R,
    R,R,R,_,R,R,R,_,R,R,R,
    R,R,R,R,R,R,R,R,R,R,R,
    _,_,R,R,R,R,R,R,R,_,_,
    _,_,R,_,_,_,_,_,R,_,_,
    _,R,_,_,_,_,_,_,_,R,_,
};

class ScreenObject
{
public:
    
    ScreenObject()
    {
        go= true;
        speed=2;
        
      }
    virtual void draw()=0;
    virtual void update()=0;
    int getX(){return x_pos;}
    int getY() {return y_pos;}
    int getMove() {return move;}
    void RightLeft(int a)
    {
        move= a;
    }
     void hit()
    {
        uLCD.filled_rectangle(x_pos, y_pos, y_pos + 11, y_pos + 8, _);
        x_pos = 128;
        y_pos = 128;
        go = false;
        uLCD.filled_rectangle(x_pos, y_pos, y_pos + 11, y_pos + 8, _);
    }
    
    
protected:
    int x_pos;
    int y_pos;
    int speed;
    bool go;
    int move;
};

class AlienBob: public ScreenObject

{
public:
    int Up;
    AlienBob(int x, int y)
    {
        x_pos= x;
        y_pos= y;
        speed= 1;
        Up=1;
    }
    
    ~AlienBob()
    {
    }
    
    virtual void draw()
    {
        if (Up==1)
        {
            uLCD.BLIT(x_pos, y_pos, ALIEN_WIDTH, ALIEN_HEIGHT, alienBobUp_sprite);
            Up=0;
        }
        else 
        {
            uLCD.BLIT(x_pos, y_pos, ALIEN_WIDTH, ALIEN_HEIGHT, alienBobDown_sprite);
            Up=1;
        }
    }
    
    virtual void update()
    {
        if (go== true)
        {
            uLCD.filled_rectangle(x_pos, y_pos, x_pos + ALIEN_WIDTH, y_pos + ALIEN_HEIGHT, _ );
            
            if (move==1)
            {
                x_pos += speed;
                if (x_pos > 110)
                {
                    move = -1;
                }
            }
            else if (move == -1)
            {
                x_pos -= speed;
                if (x_pos < 10)
                {
                    move = 1;
                }
            }
            draw();
        }
        else
        {
            uLCD.filled_rectangle(x_pos, y_pos, x_pos + ALIEN_WIDTH, y_pos + ALIEN_HEIGHT, _ );
        }
    }
};

bool FireBullet= false;

class AlienAlice: public ScreenObject
{
public:
    AlienAlice(int x, int y)
    {
        x_pos= x;
        y_pos= y;
        speed= 2;
    }
    ~AlienAlice()
    {
    }
    
    virtual void draw()
    {
        uLCD.BLIT(x_pos, y_pos, ALIEN_WIDTH, ALIEN_HEIGHT, alienAlice_sprite);
    }
    
    virtual void update()
    {
        if (go== true)
        {
            uLCD.filled_rectangle(x_pos, y_pos, x_pos + ALIEN_WIDTH, y_pos + ALIEN_HEIGHT, _ );
            if (move==1)
            {
                x_pos += speed;
                if (x_pos > 110)
                {
                    move = -1;
                }
            }
            else if (move == -1)
            {
                x_pos -= speed;
                if (x_pos < 10)
                {
                    move = 1;
                }
            }
            draw();
        }
        else
        {
            uLCD.filled_rectangle(x_pos, y_pos, x_pos + ALIEN_WIDTH, y_pos + ALIEN_HEIGHT, _ );
        }
    }
}; 

class AlienAlex: public ScreenObject

{
public:
    AlienAlex(int x, int y)
    {
        x_pos= x;
        y_pos= y;
        speed= 1;
    }
    ~AlienAlex()
    {
    }
    
    virtual void draw()
    {
        uLCD.BLIT(x_pos, y_pos, ALIEN_WIDTH, ALIEN_HEIGHT, alienAlex_sprite);
    }
    
    virtual void update()
    {
        if (go== true)
        {
            uLCD.filled_rectangle(x_pos, y_pos, x_pos + ALIEN_WIDTH, y_pos + ALIEN_HEIGHT, _ );
            if (move==1)
            {
                x_pos += speed;
                if (x_pos > 110)
                {
                    move = -1;
                }
            }
            else if (move == -1)
            {
                x_pos -= speed;
                if (x_pos < 10)
                {
                    move = 1;
                }
            }
            draw();
        }
        else
        {
            uLCD.filled_rectangle(x_pos, y_pos, x_pos + ALIEN_WIDTH, y_pos + ALIEN_HEIGHT, _ );
        }
    }
};

class AlienDom: public ScreenObject
{
public:
    AlienDom(int x, int y)
    {
        x_pos= x;
        y_pos= y;
        speed= 1;
    }
    ~AlienDom()
    {
    }
    
     virtual void draw()
    {
        uLCD.BLIT(x_pos, y_pos, ALIEN_WIDTH, ALIEN_HEIGHT, alienDom_sprite);
    }
    
     virtual void update()
    {
        if (go== true)
        {
            uLCD.filled_rectangle(x_pos, y_pos, x_pos + ALIEN_WIDTH, y_pos + ALIEN_HEIGHT, _ );
            if (move==1)
            {
                x_pos += speed;
                if (x_pos > 110)
                {
                    move = -1;
                }
            }
            else if (move == -1)
            {
                x_pos -= speed;
                if (x_pos < 10)
                {
                    move = 1;
                }
            }
            draw();
        }
        else
        {
            uLCD.filled_rectangle(x_pos, y_pos, x_pos + ALIEN_WIDTH, y_pos + ALIEN_HEIGHT, _ );
        }
    }
};

        class Ship: public ScreenObject
        {
        public:
            Ship()
            {
                ShipX= 0;
                ShipY= 15;
            }
            ~Ship()
            {
            }
            virtual void draw()
            {
                uLCD.filled_rectangle(ShipX, 116, ShipY, 119, X);
            }
            int getShipX(){return ShipX;}
            int getShipY(){return ShipY;}
            void moveRight()
            {
                if (ShipX < 110)
                {
                    uLCD.filled_rectangle(ShipX, 116, ShipY, 119, _);
                    ShipX += 2;
                    ShipY += 2;
                    uLCD.filled_rectangle(ShipX, 116, ShipY, 119, X);
                    
                }
            }
            void moveLeft()
            {
                if (ShipX > 10)
                {
                    uLCD.filled_rectangle(ShipX, 116, ShipY, 119, _);
                    ShipX -= 2;
                    ShipY -= 2;
                    uLCD.filled_rectangle(ShipX, 116, ShipY, 119, X);
                    
                }
            }
            virtual void update()
            {
                
                
            }
            void Move(int P)
            {
                draw();
            }
            void Shoot( int s)
            {
                
            }
        private:
            int ShipX;
            int ShipY;
            
            
        };
        

//class Ship: public ScreenObject
//{
//public:
//    Ship()
//    {
//        ShipX= 0;
//        ShipY= 15;
//    }
//    ~Ship()
//    {   
//    }
//    virtual void draw()
//    {
//        uLCD.filled_rectangle(ShipX, 116, ShipY, 119, X);
//    }
//    int getShipX(){return ShipX;}
//    int getShipY(){return ShipY;}
//    void setShipX(int a)
//    {
//        ShipX=a;
//        }
//    void setShipY( int b)
//    {
//        ShipY=b;
//    }
//    void moveRight()
//    {
//        if (ShipX < 110)
//        {
//            uLCD.filled_rectangle(ShipX, 116, ShipY, 119, _);
//            ShipX += 2;
//            ShipY += 2;
//            uLCD.filled_rectangle(ShipX, 116, ShipY, 119, X);
//            
//        }
//        //{
//        //            if(!acc.isXYZReady())
//        //            {
//        //                wait(0.01);
//        //            }
//        //            else
//        //            {
//        //                acc.readXYZGravity(&x,&y,&z);
//        //                x = x*factor;
//        //                uLCD.filled_rectangle(ShipX, 116, ShipY, 119, _);
//        //                ShipX += x;
//        //                y= y*factor;
//        //                ShipX += y;
//        //                uLCD.filled_rectangle(ShipX, 116, ShipY, 119, X);
//        //
//        //            }
//    }
//}
//void moveLeft()
//{
//    if (ShipX > 10)
//    {
//        uLCD.filled_rectangle(ShipX, 116, ShipY, 119, _);
//        ShipX -= 2;
//        ShipY -= 2;
//        uLCD.filled_rectangle(ShipX, 116, ShipY, 119, X);
//        
//    }
//    //        {
////                if(!acc.isXYZReady())
////                {
////                    wait(0.01);
////                }
////                else
////                {
////                    acc.readXYZGravity(&x,&y,&z);
////                    x = x*factor;
////                    uLCD.filled_rectangle(ShipX, 116, ShipY, 119, _);
////                    ShipX -= x;
////                    y= y*factor;
////                    ShipX -= y;
////                    uLCD.filled_rectangle(ShipX, 116, ShipY, 119, X);
//    //
//    //            }
//}
//}
//virtual void update()
//{
//    
//    
//}
//    //void moveRight(int d)
////    {
////       void moveRight()
////    {
////        if (ShipX < 110)
////        {
////            uLCD.filled_rectangle(ShipX, 116, ShipY, 119, _);
////            ShipX += 2;
////            ShipY += 2;
////            uLCD.filled_rectangle(ShipX, 116, ShipY, 119, X);
////            
////        }
////    }
////    void moveLeft(int d)
////    {
////        if (ShipX<100)
////        {
////            uLCD.filled_rectangle(ShipX, 116, ShipY, 119, _);
////            ShipX -= d;
////            ShipY -= d;
////            uLCD.filled_rectangle(ShipX, 116, ShipY, 119, X);
////        }
////        
////    }
////    
////    virtual void update()
////    {
////        
////        double x=0;
////        double y=0;
////        double z=0;
////        int factor=50;
////        acc.readXYZGravity(&x,&y,&z);
////        x = x*factor;
////        uLCD.locate(0,0);
////        uLCD.printf("%2f",x);
////        
////        
////        if(ShipX < 0)
////        {
////            ShipX = 0;
////        }
////        if(ShipX> 128 -5)
////        {
////            ShipX = 128 -5;
////        }
////        
////    }
//
//    private:
//        int ShipX;
//        int ShipY;
//
//        
//};
//

 
class Bullet:public ScreenObject
    {
    public:
        Bullet()
        {
            x_pos=0;
            y_pos= 110;
        }
        int getBullX(){return x_pos;}
        int getBullY(){return y_pos;}
        void setBullX(int pos_x)
        {
            x_pos= pos_x-3;
        }
        void setBullY( int Y)
        {
            y_pos= Y;
        }
        virtual void draw()
        {
            uLCD.filled_rectangle(x_pos, y_pos, x_pos+3,y_pos+4, X);
            
        }
        virtual void update()
        {
            if (y_pos<1)
            {
                FireBullet=false;
                uLCD.filled_rectangle(x_pos, y_pos, x_pos+4, y_pos+4, _);
                y_pos=110;
                
                
            }
            else
            {
                uLCD.filled_rectangle(x_pos, y_pos, x_pos+4, y_pos+4, _);
                y_pos -= 2;
                uLCD.filled_rectangle(x_pos, y_pos, x_pos+4, y_pos+4, X);
                uLCD.filled_rectangle(x_pos, y_pos,x_pos, y_pos-4, _);
            }
        
        }
        
        virtual void hit()
        {
            uLCD.filled_rectangle(x_pos, y_pos, x_pos +4 , y_pos +4, _);
            uLCD.filled_rectangle(x_pos, y_pos, x_pos +4, y_pos +4, _);
        }
        private:
        int x_pos;
        int y_pos;
    };


    void pb1_hit_callback (void) //go right
        {
            myLed1= pb1;
        }
    void pb2_hit_callback (void) //go left
        {
            myLed2= pb2;
        }
    void Shoot_hit_callback (void) 
        {
            myLed3= Shoot;
            
        }
        

    
int main()
    {
        uLCD.cls();
        uLCD.baudrate(300000);
        wait(0.3);
        pb1.mode(PullUp);
        pb2.mode(PullUp);
        Shoot.mode(PullUp);
        
        pb1.attach_deasserted(&pb1_hit_callback);
        pb2.attach_deasserted(&pb2_hit_callback);
        Shoot.attach_deasserted(&Shoot_hit_callback);
        
        pb1.setSampleFrequency();
        pb2.setSampleFrequency();
        Shoot.attach_deasserted(&Shoot_hit_callback);
        
        wait(0.3);
        
        
//        acc.readXYZGravity(&x,&y,&z)
//        uLCD.printf(“%g %g %g”, x, y,z);
        t.start();

        Ship ship;
        ship.draw();
        Bullet bullet; 
        
        srand (time(NULL));
        ScreenObject ** Aliens = new ScreenObject*[8];
        int r = 0;
        int Xpos = 0;
        int Ypos = 30;   
        for (int i = 0; i < 6; i++)
        {
            r = rand() % 4 + 1;
            
            Xpos = rand() % 100 + 1;
            if (r==1)
            {
                Aliens[i]= new AlienBob(Xpos, Ypos);
                Aliens[i]-> draw();
                Aliens[i]-> RightLeft(1);
            }
            
            else if (r==2)
            {
                Aliens[i]= new AlienAlice(Xpos, Ypos);
                Aliens[i]-> draw();
                Aliens[i]-> RightLeft(-1);
            }
            else if (r==3)
            {
                Aliens[i]= new AlienAlex(Xpos, Ypos);
                Aliens[i]-> draw();
                Aliens[i]-> RightLeft(-1);
            }
            else if (r==4)
            {
                Aliens[i]= new AlienDom(Xpos, Ypos);
                Aliens[i]-> RightLeft(-1);
                Aliens[i]-> draw();
            }
            Ypos += 10;
        }
        Aliens[6]= new Bullet();
//       Aliens[7]= new Ship();
        int numOfAliens = 6;
        bool start = true;
        while (start)
        {
            if (!pb1)
            {
                ship.moveRight();
            }
            if(!pb2)
            {
                ship.moveLeft();
            }
            if ((FireBullet==false)&&(!Shoot))
            {
                mySpeaker.PlayNote(1188, .5, 0.015);
                bullet.setBullX(ship.getShipX());
            if ((bullet.getBullY() > 0))
                {
                    FireBullet= true;
                }
            }
            ship.update();
            for(int a = 0; a < 6; a++) 
            {
                Aliens[a]->update();
                for (int b = (Aliens[a]->getX()-2); b < (Aliens[a]->getX()+8); b++) 
                {
                    if (b == bullet.getBullX()) 
                    {
                        for (int c = (Aliens[a]->getY()+3); c < (Aliens[a]->getY()+8); c++) 
                        {
                            if (c == bullet.getBullY()) 
                            {
                                bullet.hit();
                                Aliens[a]->hit();
                                FireBullet = false;  
                                bullet.setBullY(110);  
                                --numOfAliens;
                                break;
                            }
                        }
                    }
                }
            }
    


        if (FireBullet== true) 
        { 
                bullet.update();
        }

        if (numOfAliens == 0) 
        { 
            start = false;
        }
    

}
    if (start==false)
    {
        uLCD.cls();
        uLCD.printf("Congratulations!\n");
        uLCD.printf("Earth Saved!\n");
        uLCD.printf("Time Taken %f", t.read());
}
}
      
        

    

